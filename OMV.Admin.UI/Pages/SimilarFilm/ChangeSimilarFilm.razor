﻿
@inject IAdminService adminService
@inject IMapper Mapper

<div class="d-xl-flex justify-content-center">
    <EditForm Model="@Model" OnValidSubmit="@OnFormSubmit" class="mb-5 border border-1 border-secondary p-2 w-25">
        <DataAnnotationsValidator />
        <h4>@Page @Model.Title</h4>
        


        @if (Page.Equals(PageType.Edit))
        {
            <InputSelect @bind-Value="SelectedSimilarFilms" multiple style="width: 375px;">

                @foreach (var film in Films)
                {
                    @if(film.Id != Model.Id)
                    {
                        <option value="@film.Id">@film.Title (Id @film.Id)</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => Films)" />
        }


        <button type="submit" class="btn btn-@(Page.Equals(PageType.Delete) ? "danger" : "primary") rounded-0">@Page</button>
    </EditForm>
</div>

@code {
    FilmModel Model { get; set; } = new();
    [Parameter] public string Page { get; set; } = string.Empty;
    [Parameter] public FilmListDTO FilmListDTO { get; set; } = new();
    [Parameter] public List<FilmListDTO> ModelList { get; set; }

    [Parameter] public EventCallback<string> OnClick { get; set; }
    [Parameter] public EventCallback<string> OnChanged { get; set; }

    public int[] SavedSimilarFilms { get; set; }
    public int[] SelectedSimilarFilms { get; set; }

    List<FilmListDTO> Films { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        Model = Mapper.Map<FilmModel>(FilmListDTO);
        SavedSimilarFilms = GetSelectedSimilarFilmsFromDb(Model);
        Films = await adminService.GetAsync<FilmListDTO>("Film");

    }

    private async Task OnFormSubmit()
    {
        try
        {
            await HandleSimilarFilmsSubmit(Model);

            await OnChanged.InvokeAsync("");
        }
        catch
        {
            await OnChanged.InvokeAsync("Couldn't connect/disconnect the films");
        }
    }

    private async Task HandleSimilarFilmsSubmit(FilmModel model)
    {
        await RemoveSimilar(model);
        await AddSimilar(model);
    }

    private async Task RemoveSimilar(FilmModel model)
    {
        //Working on
        foreach (var Film in ModelList)
        {
            if (Film.Id == model.Id)
            {
                List<int> ActiveFilmIdCollection = new List<int>();
                List<int> NewActiveFilmIdCollection = new List<int>();
                foreach (var SimilarFilm in Film.SimilarFilms)
                {
                    ActiveFilmIdCollection.Add(SimilarFilm.SimilarFilmId);
                }
                foreach (var SimilarFilm in SelectedSimilarFilms)
                {
                    NewActiveFilmIdCollection.Add(SimilarFilm);
                }
                foreach (var Id in ActiveFilmIdCollection)
                {
                    if (!NewActiveFilmIdCollection.Contains(Id))
                    {
                        //Id should remove at foreign key
                        //Removes SimilarFilms

                        SimilarFilmDTO deleteDto = new
                            (
                                model.Id,
                                Id
                            );
                            await adminService.DeleteAsyncRef<SimilarFilmDTO>($"SimilarFilm/", deleteDto);

                            SimilarFilmDTO deleteDto2 = new
                            (
                                Id,
                                model.Id
                            );
                        await adminService.DeleteAsyncRef<SimilarFilmDTO>($"SimilarFilm/", deleteDto2);
                        
                    }
                }

            }
        }
    }
    private async Task AddSimilar(FilmModel model)
    {
        //Add all genres for this film
        for (int i = 0; i < SelectedSimilarFilms.Length; i++)
        {
            SimilarFilmDTO saveDto = new
            (
                model.Id,
                SelectedSimilarFilms[i]
            );
            await adminService.CreateAsync<SimilarFilmDTO>($"similarfilms/", saveDto);
            SimilarFilmDTO saveDto2 = new
            (
                SelectedSimilarFilms[i],
                model.Id
            );
            await adminService.CreateAsync<SimilarFilmDTO>($"similarfilms/", saveDto2);

        }
    }


    private int[] GetSelectedSimilarFilmsFromDb(FilmModel model)
    {
        SelectedSimilarFilms = new int[model.SimilarFilms.Count()];
        int i = 0;
        foreach (var film in model.SimilarFilms)
        {
            SelectedSimilarFilms[i] = film.SimilarFilmId;
            i++;
        }
        return SelectedSimilarFilms;
    }
}
